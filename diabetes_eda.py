# -*- coding: utf-8 -*-
"""Diabetes-EDA.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1ZaXiWfWW9cHQAbfBuC76ar0wJgjjsbeI

###Exploratory Data Analysis (EDA): is a key step in any data analysis or data science project. It’s all about getting to know your dataset—finding patterns, spotting anomalies (like outliers), and forming initial hypotheses based on what you discover.

###During EDA, we summarize the numerical data with statistics and use a variety of visual tools to help us understand the dataset better. In this guide, we'll walk through the EDA process using an example dataset with Python's Pandas library. We'll also use visualization techniques from Seaborn and Matplotlib to really bring the data to life and gain deeper insights.

#About Dataset

###This dataset comes from the National Institute of Diabetes and Digestive and Kidney Diseases. Its goal is to predict whether a patient has diabetes based on certain diagnostic measurements. The dataset has specific constraints: all patients are females of Pima Indian heritage, and they are all at least 21 years old.

###The dataset, provided in a CSV file, includes several variables. Most of these are independent variables, which are various medical predictor measurements. There is also one dependent variable, the outcome, indicating whether the patient has diabetes.

Information about dataset attributes -

Pregnancies              : To express the Number of pregnancies

Glucose                  : To express the Glucose level in blood

BloodPressure            : To express the Blood pressure measurement

SkinThickness            : To express the thickness of the skin

Insulin                  : To express the Insulin level in blood

BMI                      : To express the Body mass index

DiabetesPedigreeFunction : To express the Diabetes percentage

Age                      : To express the age

Outcome                  : To express the final result 1 is Yes and 0 is No

#Importing Necessary Libraries

We are required to importing the libraries so  as to performing EDA. These include NumPy, Pandas, Matplotlib, and Seaborn.
"""

# Commented out IPython magic to ensure Python compatibility.
import pandas as pd # Pandas is a powerful library for data manipulation and analysis.
import numpy as np # NumPy is a powerful tool for numerical computations in Python.
import seaborn as sns # Seaborn is a statistical data visualization library based on Matplotlib
import matplotlib.pyplot as plt # Matplotlib is a comprehensive library for creating static, animated, and interactive visualizations in Python
# %matplotlib inline

"""#Loading the Dataset


"""

df= pd.read_csv("diabetes.csv")

"""We will now read the data from a CSV file into a Pandas DataFrame Let us have a look at how our dataset looks like using df.head()"""

df.head()

df.columns # Displays the names of the columns

df.shape # Displays the total count of the Rows and Columns respectively.

"""#Descriptive Statistics

The df.describe(include='all') method provides a summary of statistics pertaining to the DataFrame columns. When using the include='all' parameter, it includes all columns of the DataFrame in the output, regardless of their data type.
"""

df.describe(include='all')

"""##Plotting histograms to understand the distribution of numerical features."""

import matplotlib.pyplot as plt

# Plot histograms for all numerical features
df.hist(figsize=(12, 12))
plt.show()

"""##Checking if there is any Null value in the Data

We will now check for missing values in our dataset. In case there are any missing entries, we will impute them with appropriate values (mode in case of categorical feature, and median or mean in case of numerical feature). We will use the isnull() function for this purpose.
"""

df.isnull().sum() # Displays the total count of the null valuesin the particular columns.

"""There is no null or missing value in the dataset."""

df.info() # Displays the total count of values present in the particular column along with the null count and data type.

# Check for duplicate rows
duplicate_rows = df[df.duplicated()]

if duplicate_rows.empty:
    print("No duplicate values found.")
else:
    print("Duplicate values found:")
    print(duplicate_rows)

df.corr() # computes the correlation matrix for the variables in the DataFrame df.

"""#Graphical representation
A histplot in Seaborn (or a histogram plot in general) is used to visualize the distribution of a dataset. It shows the frequency (or count) of data points that fall within specified bins or intervals.
"""

# Define custom colors
custom_colors = ["#FF5733", "#3366FF", "#33FF57"]  # Example colors, you can adjust as needed

# Plot the histogram with custom colors
sns.histplot(df['Pregnancies'], kde=True, color="#FF5733", palette=custom_colors)

# Define custom colors
custom_colors = ["#FF5733", "#3366FF", "#33FF57"]  # Example colors, you can adjust as needed

# Plot the histogram with custom colors
sns.histplot(df['Glucose'], kde=True, color="#3366FF", palette=custom_colors)

# Define custom colors
custom_colors = ["#FF5733", "#3366FF", "#33FF57"]  # Example colors, you can adjust as needed

# Plot the histogram with custom colors
sns.histplot(df['BloodPressure'], kde=True, color="#33FF57", palette=custom_colors)

# Define custom colors
custom_colors = ["#FF5733", "#3366FF", "#33FF57"]  # Example colors, you can adjust as needed

# Plot the histogram with custom colors
sns.histplot(df['SkinThickness'], kde=True, color="#FF5733", palette=custom_colors)

# Define custom colors
custom_colors = ["#FF5733", "#3366FF", "#33FF57"]  # Example colors, you can adjust as needed

# Plot the histogram with custom colors
sns.histplot(df['Insulin'], kde=True, color="#3366FF", palette=custom_colors)

# Define custom colors
custom_colors = ["#FF5733", "#3366FF", "#33FF57"]  # Example colors, you can adjust as needed

# Plot the histogram with custom colors
sns.histplot(df['BMI'], kde=True, color="#33FF57", palette=custom_colors)

# Define custom colors
custom_colors = ["#FF5733", "#3366FF", "#33FF57"]  # Example colors, you can adjust as needed

# Plot the histogram with custom colors
sns.histplot(df['DiabetesPedigreeFunction'], kde=True, color="#FF5733", palette=custom_colors)

# Define custom colors
custom_colors = ["#FF5733", "#3366FF", "#33FF57"]  # Example colors, you can adjust as needed

# Plot the histogram with custom colors
sns.histplot(df['Age'], kde=True, color="#3366FF", palette=custom_colors)

# Compute the correlation matrix
corr_matrix = df.corr()

# Plot the heatmap
plt.figure(figsize=(12, 8))
sns.heatmap(corr_matrix, annot=True, fmt='.2f', cmap='coolwarm')
plt.show()

"""###In the heatmap, the colors represent the strength and direction of the correlation coefficients between pairs of variables in the correlation matrix.

###Correlation Coefficients:

###The correlation coefficient ranges from -1 to 1.
###1 indicates a perfect positive correlation.
###-1 indicates a perfect negative correlation.
###0 indicates no correlation.

###Dark Red: Strong positive correlation (close to 1)
###Dark Blue: Strong negative correlation (close to -1)
###Light Colors (light red/light blue): Weak or no correlation (close to 0)

##Detecting any outlier using Box Plot
"""

# Plot box plots for all numerical features
plt.figure(figsize=(15, 10))
df.plot(kind='box', subplots=True, layout=(4, 4), sharex=False, sharey=False, figsize=(15, 15))
plt.show()

"""Here as we go thorugh the boxplot visuals,

*   Insulin and DiabetesPedigreeFunction has the highest number of outliers
*   Age, BMI, Pregnancies, and Blood pressure have some outliers
*   Glucose and Skin Thickness has the least number of outliers

##Visualization through Pair plot
"""

# Pair plot with hue based on target variable
sns.pairplot(df, hue='Outcome', diag_kind='kde')
plt.show()

"""As we go through the pair plot we can check the details based on the outcome:


*  0 is No Diabetes
*  1 is Diabetes is detected


"""

